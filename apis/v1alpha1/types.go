// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// Amazon Keyspaces supports the target tracking auto scaling policy. With this
// policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed
// to provisioned capacity stays at or near the target value that you specify.
// You define the target value as a percentage between 20 and 90.
type AutoScalingPolicy struct {
	// The auto scaling policy that scales a table based on the ratio of consumed
	// to provisioned capacity.
	TargetTrackingScalingPolicyConfiguration *TargetTrackingScalingPolicyConfiguration `json:"targetTrackingScalingPolicyConfiguration,omitempty"`
}

// The optional auto scaling settings for a table with provisioned throughput
// capacity.
//
// To turn on auto scaling for a table in throughputMode:PROVISIONED, you must
// specify the following parameters.
//
// Configure the minimum and maximum capacity units. The auto scaling policy
// ensures that capacity never goes below the minimum or above the maximum range.
//
//   - minimumUnits: The minimum level of throughput the table should always
//     be ready to support. The value must be between 1 and the max throughput
//     per second quota for your account (40,000 by default).
//
//   - maximumUnits: The maximum level of throughput the table should always
//     be ready to support. The value must be between 1 and the max throughput
//     per second quota for your account (40,000 by default).
//
//   - scalingPolicy: Amazon Keyspaces supports the target tracking scaling
//     policy. The auto scaling target is the provisioned capacity of the table.
//     targetTrackingScalingPolicyConfiguration: To define the target tracking
//     policy, you must define the target value. targetValue: The target utilization
//     rate of the table. Amazon Keyspaces auto scaling ensures that the ratio
//     of consumed capacity to provisioned capacity stays at or near this value.
//     You define targetValue as a percentage. A double between 20 and 90. (Required)
//     disableScaleIn: A boolean that specifies if scale-in is disabled or enabled
//     for the table. This parameter is disabled by default. To turn on scale-in,
//     set the boolean value to FALSE. This means that capacity for a table can
//     be automatically scaled down on your behalf. (Optional) scaleInCooldown:
//     A cooldown period in seconds between scaling activities that lets the
//     table stabilize before another scale in activity starts. If no value is
//     provided, the default is 0. (Optional) scaleOutCooldown: A cooldown period
//     in seconds between scaling activities that lets the table stabilize before
//     another scale out activity starts. If no value is provided, the default
//     is 0. (Optional)
//
// For more information, see Managing throughput capacity automatically with
// Amazon Keyspaces auto scaling (https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html)
// in the Amazon Keyspaces Developer Guide.
type AutoScalingSettings struct {
	AutoScalingDisabled *bool  `json:"autoScalingDisabled,omitempty"`
	MaximumUnits        *int64 `json:"maximumUnits,omitempty"`
	MinimumUnits        *int64 `json:"minimumUnits,omitempty"`
	// Amazon Keyspaces supports the target tracking auto scaling policy. With this
	// policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed
	// to provisioned capacity stays at or near the target value that you specify.
	// You define the target value as a percentage between 20 and 90.
	ScalingPolicy *AutoScalingPolicy `json:"scalingPolicy,omitempty"`
}

// The optional auto scaling capacity settings for a table in provisioned capacity
// mode.
type AutoScalingSpecification struct {
	// The optional auto scaling settings for a table with provisioned throughput
	// capacity.
	//
	// To turn on auto scaling for a table in throughputMode:PROVISIONED, you must
	// specify the following parameters.
	//
	// Configure the minimum and maximum capacity units. The auto scaling policy
	// ensures that capacity never goes below the minimum or above the maximum range.
	//
	//    * minimumUnits: The minimum level of throughput the table should always
	//    be ready to support. The value must be between 1 and the max throughput
	//    per second quota for your account (40,000 by default).
	//
	//    * maximumUnits: The maximum level of throughput the table should always
	//    be ready to support. The value must be between 1 and the max throughput
	//    per second quota for your account (40,000 by default).
	//
	//    * scalingPolicy: Amazon Keyspaces supports the target tracking scaling
	//    policy. The auto scaling target is the provisioned capacity of the table.
	//    targetTrackingScalingPolicyConfiguration: To define the target tracking
	//    policy, you must define the target value. targetValue: The target utilization
	//    rate of the table. Amazon Keyspaces auto scaling ensures that the ratio
	//    of consumed capacity to provisioned capacity stays at or near this value.
	//    You define targetValue as a percentage. A double between 20 and 90. (Required)
	//    disableScaleIn: A boolean that specifies if scale-in is disabled or enabled
	//    for the table. This parameter is disabled by default. To turn on scale-in,
	//    set the boolean value to FALSE. This means that capacity for a table can
	//    be automatically scaled down on your behalf. (Optional) scaleInCooldown:
	//    A cooldown period in seconds between scaling activities that lets the
	//    table stabilize before another scale in activity starts. If no value is
	//    provided, the default is 0. (Optional) scaleOutCooldown: A cooldown period
	//    in seconds between scaling activities that lets the table stabilize before
	//    another scale out activity starts. If no value is provided, the default
	//    is 0. (Optional)
	//
	// For more information, see Managing throughput capacity automatically with
	// Amazon Keyspaces auto scaling (https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html)
	// in the Amazon Keyspaces Developer Guide.
	ReadCapacityAutoScaling *AutoScalingSettings `json:"readCapacityAutoScaling,omitempty"`
	// The optional auto scaling settings for a table with provisioned throughput
	// capacity.
	//
	// To turn on auto scaling for a table in throughputMode:PROVISIONED, you must
	// specify the following parameters.
	//
	// Configure the minimum and maximum capacity units. The auto scaling policy
	// ensures that capacity never goes below the minimum or above the maximum range.
	//
	//    * minimumUnits: The minimum level of throughput the table should always
	//    be ready to support. The value must be between 1 and the max throughput
	//    per second quota for your account (40,000 by default).
	//
	//    * maximumUnits: The maximum level of throughput the table should always
	//    be ready to support. The value must be between 1 and the max throughput
	//    per second quota for your account (40,000 by default).
	//
	//    * scalingPolicy: Amazon Keyspaces supports the target tracking scaling
	//    policy. The auto scaling target is the provisioned capacity of the table.
	//    targetTrackingScalingPolicyConfiguration: To define the target tracking
	//    policy, you must define the target value. targetValue: The target utilization
	//    rate of the table. Amazon Keyspaces auto scaling ensures that the ratio
	//    of consumed capacity to provisioned capacity stays at or near this value.
	//    You define targetValue as a percentage. A double between 20 and 90. (Required)
	//    disableScaleIn: A boolean that specifies if scale-in is disabled or enabled
	//    for the table. This parameter is disabled by default. To turn on scale-in,
	//    set the boolean value to FALSE. This means that capacity for a table can
	//    be automatically scaled down on your behalf. (Optional) scaleInCooldown:
	//    A cooldown period in seconds between scaling activities that lets the
	//    table stabilize before another scale in activity starts. If no value is
	//    provided, the default is 0. (Optional) scaleOutCooldown: A cooldown period
	//    in seconds between scaling activities that lets the table stabilize before
	//    another scale out activity starts. If no value is provided, the default
	//    is 0. (Optional)
	//
	// For more information, see Managing throughput capacity automatically with
	// Amazon Keyspaces auto scaling (https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html)
	// in the Amazon Keyspaces Developer Guide.
	WriteCapacityAutoScaling *AutoScalingSettings `json:"writeCapacityAutoScaling,omitempty"`
}

// Amazon Keyspaces has two read/write capacity modes for processing reads and
// writes on your tables:
//
//   - On-demand (default)
//
//   - Provisioned
//
// The read/write capacity mode that you choose controls how you are charged
// for read and write throughput and how table throughput capacity is managed.
//
// For more information, see Read/write capacity modes (https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html)
// in the Amazon Keyspaces Developer Guide.
type CapacitySpecification struct {
	ReadCapacityUnits  *int64  `json:"readCapacityUnits,omitempty"`
	ThroughputMode     *string `json:"throughputMode,omitempty"`
	WriteCapacityUnits *int64  `json:"writeCapacityUnits,omitempty"`
}

// The read/write throughput capacity mode for a table. The options are:
//
//   - throughputMode:PAY_PER_REQUEST and
//
//   - throughputMode:PROVISIONED.
//
// For more information, see Read/write capacity modes (https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html)
// in the Amazon Keyspaces Developer Guide.
type CapacitySpecificationSummary struct {
	LastUpdateToPayPerRequestTimestamp *metav1.Time `json:"lastUpdateToPayPerRequestTimestamp,omitempty"`
	ReadCapacityUnits                  *int64       `json:"readCapacityUnits,omitempty"`
	ThroughputMode                     *string      `json:"throughputMode,omitempty"`
	WriteCapacityUnits                 *int64       `json:"writeCapacityUnits,omitempty"`
}

// The client-side timestamp setting of the table.
//
// For more information, see How it works: Amazon Keyspaces client-side timestamps
// (https://docs.aws.amazon.com/keyspaces/latest/devguide/client-side-timestamps-how-it-works.html)
// in the Amazon Keyspaces Developer Guide.
type ClientSideTimestamps struct {
	Status *string `json:"status,omitempty"`
}

// The optional clustering column portion of your primary key determines how
// the data is clustered and sorted within each partition.
type ClusteringKey struct {
	Name    *string `json:"name,omitempty"`
	OrderBy *string `json:"orderBy,omitempty"`
}

// The names and data types of regular columns.
type ColumnDefinition struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type_,omitempty"`
}

// An optional comment that describes the table.
type Comment struct {
	Message *string `json:"message,omitempty"`
}

// Amazon Keyspaces encrypts and decrypts the table data at rest transparently
// and integrates with Key Management Service for storing and managing the encryption
// key. You can choose one of the following KMS keys (KMS keys):
//
//   - Amazon Web Services owned key - This is the default encryption type.
//     The key is owned by Amazon Keyspaces (no additional charge).
//
//   - Customer managed key - This key is stored in your account and is created,
//     owned, and managed by you. You have full control over the customer managed
//     key (KMS charges apply).
//
// For more information about encryption at rest in Amazon Keyspaces, see Encryption
// at rest (https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html)
// in the Amazon Keyspaces Developer Guide.
//
// For more information about KMS, see KMS management service concepts (https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html)
// in the Key Management Service Developer Guide.
type EncryptionSpecification struct {
	KMSKeyIdentifier *string `json:"kmsKeyIdentifier,omitempty"`
	Type             *string `json:"type_,omitempty"`
}

// A field definition consists out of a name and a type.
type FieldDefinition struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type_,omitempty"`
}

// Represents the properties of a keyspace.
type KeyspaceSummary struct {
	KeyspaceName        *string   `json:"keyspaceName,omitempty"`
	ReplicationRegions  []*string `json:"replicationRegions,omitempty"`
	ReplicationStrategy *string   `json:"replicationStrategy,omitempty"`
	ResourceARN         *string   `json:"resourceARN,omitempty"`
}

// The partition key portion of the primary key is required and determines how
// Amazon Keyspaces stores the data. The partition key can be a single column,
// or it can be a compound value composed of two or more columns.
type PartitionKey struct {
	Name *string `json:"name,omitempty"`
}

// Point-in-time recovery (PITR) helps protect your Amazon Keyspaces tables
// from accidental write or delete operations by providing you continuous backups
// of your table data.
//
// For more information, see Point-in-time recovery (https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html)
// in the Amazon Keyspaces Developer Guide.
type PointInTimeRecovery struct {
	Status *string `json:"status,omitempty"`
}

// The point-in-time recovery status of the specified table.
type PointInTimeRecoverySummary struct {
	EarliestRestorableTimestamp *metav1.Time `json:"earliestRestorableTimestamp,omitempty"`
	Status                      *string      `json:"status,omitempty"`
}

// The auto scaling settings of a multi-Region table in the specified Amazon
// Web Services Region.
type ReplicaAutoScalingSpecification struct {
	// The optional auto scaling capacity settings for a table in provisioned capacity
	// mode.
	AutoScalingSpecification *AutoScalingSpecification `json:"autoScalingSpecification,omitempty"`
	Region                   *string                   `json:"region,omitempty"`
}

// The Amazon Web Services Region specific settings of a multi-Region table.
//
// For a multi-Region table, you can configure the table's read capacity differently
// per Amazon Web Services Region. You can do this by configuring the following
// parameters.
//
//   - region: The Region where these settings are applied. (Required)
//
//   - readCapacityUnits: The provisioned read capacity units. (Optional)
//
//   - readCapacityAutoScaling: The read capacity auto scaling settings for
//     the table. (Optional)
type ReplicaSpecification struct {
	// The optional auto scaling settings for a table with provisioned throughput
	// capacity.
	//
	// To turn on auto scaling for a table in throughputMode:PROVISIONED, you must
	// specify the following parameters.
	//
	// Configure the minimum and maximum capacity units. The auto scaling policy
	// ensures that capacity never goes below the minimum or above the maximum range.
	//
	//    * minimumUnits: The minimum level of throughput the table should always
	//    be ready to support. The value must be between 1 and the max throughput
	//    per second quota for your account (40,000 by default).
	//
	//    * maximumUnits: The maximum level of throughput the table should always
	//    be ready to support. The value must be between 1 and the max throughput
	//    per second quota for your account (40,000 by default).
	//
	//    * scalingPolicy: Amazon Keyspaces supports the target tracking scaling
	//    policy. The auto scaling target is the provisioned capacity of the table.
	//    targetTrackingScalingPolicyConfiguration: To define the target tracking
	//    policy, you must define the target value. targetValue: The target utilization
	//    rate of the table. Amazon Keyspaces auto scaling ensures that the ratio
	//    of consumed capacity to provisioned capacity stays at or near this value.
	//    You define targetValue as a percentage. A double between 20 and 90. (Required)
	//    disableScaleIn: A boolean that specifies if scale-in is disabled or enabled
	//    for the table. This parameter is disabled by default. To turn on scale-in,
	//    set the boolean value to FALSE. This means that capacity for a table can
	//    be automatically scaled down on your behalf. (Optional) scaleInCooldown:
	//    A cooldown period in seconds between scaling activities that lets the
	//    table stabilize before another scale in activity starts. If no value is
	//    provided, the default is 0. (Optional) scaleOutCooldown: A cooldown period
	//    in seconds between scaling activities that lets the table stabilize before
	//    another scale out activity starts. If no value is provided, the default
	//    is 0. (Optional)
	//
	// For more information, see Managing throughput capacity automatically with
	// Amazon Keyspaces auto scaling (https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html)
	// in the Amazon Keyspaces Developer Guide.
	ReadCapacityAutoScaling *AutoScalingSettings `json:"readCapacityAutoScaling,omitempty"`
	ReadCapacityUnits       *int64               `json:"readCapacityUnits,omitempty"`
	Region                  *string              `json:"region,omitempty"`
}

// The Region-specific settings of a multi-Region table in the specified Amazon
// Web Services Region.
//
// If the multi-Region table is using provisioned capacity and has optional
// auto scaling policies configured, note that the Region specific summary returns
// both read and write capacity settings. But only Region specific read capacity
// settings can be configured for a multi-Region table. In a multi-Region table,
// your write capacity units will be synced across all Amazon Web Services Regions
// to ensure that there is enough capacity to replicate write events across
// Regions.
type ReplicaSpecificationSummary struct {
	// The read/write throughput capacity mode for a table. The options are:
	//
	//    * throughputMode:PAY_PER_REQUEST and
	//
	//    * throughputMode:PROVISIONED.
	//
	// For more information, see Read/write capacity modes (https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html)
	// in the Amazon Keyspaces Developer Guide.
	CapacitySpecification *CapacitySpecificationSummary `json:"capacitySpecification,omitempty"`
	Region                *string                       `json:"region,omitempty"`
	Status                *string                       `json:"status,omitempty"`
}

// This shows the summary status of the keyspace after a new Amazon Web Services
// Region was added.
type ReplicationGroupStatus struct {
	KeyspaceStatus            *string `json:"keyspaceStatus,omitempty"`
	Region                    *string `json:"region,omitempty"`
	TablesReplicationProgress *string `json:"tablesReplicationProgress,omitempty"`
}

// The replication specification of the keyspace includes:
//
//   - regionList - up to six Amazon Web Services Regions where the keyspace
//     is replicated in.
//
//   - replicationStrategy - the required value is SINGLE_REGION or MULTI_REGION.
type ReplicationSpecification struct {
	RegionList          []*string `json:"regionList,omitempty"`
	ReplicationStrategy *string   `json:"replicationStrategy,omitempty"`
}

// Describes the schema of the table.
type SchemaDefinition struct {
	AllColumns     []*ColumnDefinition `json:"allColumns,omitempty"`
	ClusteringKeys []*ClusteringKey    `json:"clusteringKeys,omitempty"`
	PartitionKeys  []*PartitionKey     `json:"partitionKeys,omitempty"`
	StaticColumns  []*StaticColumn     `json:"staticColumns,omitempty"`
}

// The static columns of the table. Static columns store values that are shared
// by all rows in the same partition.
type StaticColumn struct {
	Name *string `json:"name,omitempty"`
}

// Returns the name of the specified table, the keyspace it is stored in, and
// the unique identifier in the format of an Amazon Resource Name (ARN).
type TableSummary struct {
	KeyspaceName *string `json:"keyspaceName,omitempty"`
	ResourceARN  *string `json:"resourceARN,omitempty"`
	TableName    *string `json:"tableName,omitempty"`
}

// Describes a tag. A tag is a key-value pair. You can add up to 50 tags to
// a single Amazon Keyspaces resource.
//
// Amazon Web Services-assigned tag names and values are automatically assigned
// the aws: prefix, which the user cannot assign. Amazon Web Services-assigned
// tag names do not count towards the tag limit of 50. User-assigned tag names
// have the prefix user: in the Cost Allocation Report. You cannot backdate
// the application of a tag.
//
// For more information, see Adding tags and labels to Amazon Keyspaces resources
// (https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html)
// in the Amazon Keyspaces Developer Guide.
type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// The auto scaling policy that scales a table based on the ratio of consumed
// to provisioned capacity.
type TargetTrackingScalingPolicyConfiguration struct {
	DisableScaleIn   *bool    `json:"disableScaleIn,omitempty"`
	ScaleInCooldown  *int64   `json:"scaleInCooldown,omitempty"`
	ScaleOutCooldown *int64   `json:"scaleOutCooldown,omitempty"`
	TargetValue      *float64 `json:"targetValue,omitempty"`
}

// Enable custom Time to Live (TTL) settings for rows and columns without setting
// a TTL default for the specified table.
//
// For more information, see Enabling TTL on tables (https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_enabling)
// in the Amazon Keyspaces Developer Guide.
type TimeToLive struct {
	Status *string `json:"status,omitempty"`
}
